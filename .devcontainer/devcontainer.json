# app.py - VOLLEDIGE VERSIE MET NETTE CSV-DOWNLOADS

import streamlit as st
import pandas as pd
from io import BytesIO
import praw
from praw.exceptions import PRAWException
import time
import re

# --- Configuratie & Secrets ---
CLIENT_ID = st.secrets.get("reddit_client_id")
CLIENT_SECRET = st.secrets.get("reddit_client_secret")
APP_PASSWORD = st.secrets.get("app_password")
REDIRECT_URI = st.secrets.get("redirect_uri")


# --- HELPER FUNCTIE 1: Find Communities (terug in app.py) ---
@st.cache_data(ttl=3600, show_spinner=False)
def find_communities(_reddit, search_queries: list):
    """Zoekt naar subreddits. Negeert de PRAW instance voor caching."""
    aggregated_results = {}
    for query in search_queries:
        try:
            for subreddit in _reddit.subreddits.search(query, limit=10):
                community_name = subreddit.display_name
                if community_name in aggregated_results:
                    aggregated_results[community_name]['Found By'].add(query)
                else:
                    aggregated_results[community_name] = {
                        'Community': f"r/{community_name}", 'Members': subreddit.subscribers,
                        'Community Link': f"https://www.reddit.com/r/{community_name}",
                        'Top Posts (Month)': f"https://www.reddit.com/r/{community_name}/top/?t=month",
                        'Found By': {query}
                    }
        except Exception as e:
            st.warning(f"Kon niet zoeken met query '{query}'. Fout: {e}")
    if not aggregated_results: return pd.DataFrame()
    final_list = list(aggregated_results.values())
    for item in final_list:
        item['Found By (Keywords)'] = ', '.join(sorted(list(item['Found By'])))
        del item['Found By']
    df = pd.DataFrame(final_list)
    return df.sort_values(by='Members', ascending=False).reset_index(drop=True) if not df.empty else df


# --- HELPER FUNCTIE 2: Find Buying Signals (terug in app.py) ---
def find_buying_signals(_reddit, subreddit_name: str, keywords: list, time_filter: str, post_limit: int, comment_limit: int):
    """Scant EEN ENKELE subreddit en geeft een lijst met gevonden signalen terug."""
    signals = []
    subreddit = _reddit.subreddit(subreddit_name)
    top_posts = subreddit.top(time_filter=time_filter, limit=post_limit)

    for post in top_posts:
        # Combineer titel en tekst voor een volledige scan van de post
        post_content = f"{post.title.lower()} {post.selftext.lower()}"
        matched_post_keywords = {keyword for keyword in keywords if keyword.lower() in post_content}
        if matched_post_keywords and post.author:
            signals.append({
                "Subreddit": subreddit_name, "Match": ', '.join(matched_post_keywords), "Type": "Post",
                "Text": post.title.replace('\n', ' ').strip(),
                "Author": post.author.name, "Link": f"https://reddit.com{post.permalink}"
            })
        
        # Scan comments
        if comment_limit > 0:
            post.comments.replace_more(limit=0)
            for comment in post.comments.list():
                if hasattr(comment, 'body') and comment.author:
                    # Zoek naar het EERSTE keyword dat matcht en ga dan door
                    for keyword in keywords:
                        if keyword.lower() in comment.body.lower():
                            signals.append({
                                "Subreddit": subreddit_name, "Match": keyword, "Type": "Comment",
                                "Text": comment.body.replace('\n', ' ').strip()[:300] + '...',
                                "Author": comment.author.name, "Link": f"https://reddit.com{comment.permalink}"
                            })
                            break # Ga naar de volgende comment na de eerste match
    return signals

# --- UI Functies voor Authenticatie ---
def show_password_form():
    st.title("üöÄ The Audience Finder PRO")
    st.header("Step 1: App Access Login")
    with st.form(key='password_login_form'):
        password = st.text_input("Please enter the password", type="password", label_visibility="collapsed")
        if st.form_submit_button("Login", use_container_width=True):
            if password == APP_PASSWORD:
                st.session_state["password_correct"] = True
                st.rerun()
            else:
                st.error("üö® The password you entered is incorrect.")

def show_reddit_login_page():
    st.title("üöÄ The Audience Finder PRO")
    st.header("Step 2: Connect your Reddit Account")
    st.markdown("Access confirmed. Please log in with Reddit to allow the app to perform searches on your behalf.")
    reddit_auth_instance = praw.Reddit(
        client_id=CLIENT_ID, client_secret=CLIENT_SECRET,
        redirect_uri=REDIRECT_URI, user_agent="AudienceFinderPro/Boyd (OAuth Setup)"
    )
    auth_url = reddit_auth_instance.auth.url(scopes=["identity", "read", "history"], state="pro_login", duration="permanent")
    st.link_button("Login with Reddit", auth_url, type="primary", use_container_width=True)
    st.info("‚ÑπÔ∏è You will be redirected to Reddit to grant permission. This app never sees your password.")

# --- Hoofdapplicatie ---
def show_main_app(reddit):
    col1, col2 = st.columns([0.85, 0.15])
    with col1:
        st.title("üöÄ The Audience Finder PRO")
        st.markdown(f"Logged in as **u/{st.session_state.username}**. Discover communities **and buying signals**.")
    with col2:
        if st.button("Logout", use_container_width=True):
            st.session_state.clear()
            st.rerun()
    
    # --- Deel 1: Communities Vinden ---
    st.header("1. Find Relevant Communities")
    with st.form(key='community_search_form'):
        search_queries_input = st.text_area("Queries", label_visibility="collapsed", height=150, placeholder="For example:\nSaaS for startups...")
        community_form_submitted = st.form_submit_button("Find Communities", type="primary", use_container_width=True)

    if community_form_submitted:
        search_queries_list = [q.strip() for q in search_queries_input.split('\n') if q.strip()]
        if not search_queries_list:
            st.warning("Please enter at least one search query.")
        else:
            with st.spinner('üîç Searching Reddit for communities...'):
                results_df = find_communities(reddit, search_queries_list)
                st.session_state["audience_df"] = results_df if not results_df.empty else None

    # --- Sectie 2 & 3 zijn nu altijd zichtbaar ---
    st.header("2. Discovered Communities")
    if "audience_df" in st.session_state:
        if st.session_state.audience_df is not None:
            st.dataframe(st.session_state["audience_df"], use_container_width=True, hide_index=True)
        else:
            st.success("‚úÖ Search complete, but no communities were found.")
    else:
        st.write("‚Äî")

    st.header("3. Download Community List")
    if st.session_state.get("audience_df") is not None:
        df_for_download = st.session_state['audience_df'].copy()
        df_for_download['Status'] = 'Not Started'
        df_for_download['Priority'] = ''
        df_for_download['Notes'] = ''
        csv_data = df_for_download.to_csv(index=False).encode('utf-8')
        st.download_button("üì• Download Communities as CSV", csv_data, 'community_finder_results.csv', 'text/csv', use_container_width=True)
    else:
        st.write("‚Äî")

    # --- Deel 2: Koopsignalen Scan (VOLLEDIG GECORRIGEERDE STRUCTUUR) ---
    st.divider()
    st.header("4. Buying Signal Scanner")

    # Initialiseer de 'preset' waarde in session_state als deze niet bestaat.
    if 'scan_intensity_preset' not in st.session_state:
        st.session_state.scan_intensity_preset = "Standard" # Aangepast naar simpele string

    ### CORRECTIE START ###
    # De radio-knop staat nu BUITEN het formulier.
    # Dit zorgt ervoor dat de app direct reageert op een wijziging.
    preset_options = ["Fast", "Standard", "Deep", "Custom"]
    preset_captions = ["üü¢ Fast", "üîµ Standard", "üî¥ Deep", "‚öôÔ∏è Custom"]
    
    preset = st.radio(
        "Scan Intensity",
        options=preset_options,
        captions=preset_captions, # Gebruik captions voor de iconen, niet in de state.
        key='scan_intensity_preset',
        horizontal=True,
        help="""
        Choose a preset to balance scan speed and thoroughness.
        - üü¢ **Fast**: Quickly test your keywords (10 posts / 20 comments).
        - üîµ **Standard**: Best mix of speed and coverage (50 posts / 100 comments).
        - üî¥ **Deep**: Most thorough and slowest scan (100 posts / 500 comments).
        - ‚öôÔ∏è **Custom**: Manually set the limits below.
        """
    )

    # Het formulier volgt hierna en bevat alle invoervelden en de submit knop.
    with st.form(key="signal_scanner_form", border=True):
        
        # De custom velden worden nu conditioneel BINNEN het formulier getoond,
        # gebaseerd op de keuze die BUITEN het formulier is gemaakt.
        if st.session_state.scan_intensity_preset == "Custom":
            c1, c2 = st.columns(2)
            with c1:
                post_limit_custom = st.number_input("Posts per subreddit", 1, 200, 50, 1)
            with c2:
                comment_limit_custom = st.number_input("Max comments per post", 0, 1000, 100, 10)

        # De rest van de instellingen
        time_filter = st.radio(
            "Time frame for top posts",
            ["day", "week", "month", "year", "all"], index=2, horizontal=True,
            help="Select the time window for fetching top posts.\n- **Week/Month:** Recommended for recent signals.\n- **Year/All:** Slower, but more comprehensive."
        )
        subreddits_input = st.text_area("Subreddits to scan (one per line)", placeholder="e.g. sidehustle\nsolopreneur", height=150)
        keywords_input = st.text_area("Pain point keywords (one per line)", placeholder="e.g. market research\nfind clients", height=150)
        
        # De submit-knop voor het formulier
        signal_form_submitted = st.form_submit_button("üîé Run Buying Signal Scan", type="primary", use_container_width=True)
    ### CORRECTIE EINDE ###

    # De logica die na het submitten wordt uitgevoerd.
    if signal_form_submitted:
        # Lees de waarde van de preset direct uit session_state.
        preset_choice = st.session_state.scan_intensity_preset
        
        if preset_choice == "Fast": post_limit, comment_limit = 10, 20
        elif preset_choice == "Standard": post_limit, comment_limit = 50, 100
        elif preset_choice == "Deep": post_limit, comment_limit = 100, 500
        else: # "Custom"
            post_limit, comment_limit = post_limit_custom, comment_limit_custom

        custom_subreddits = [s.strip() for s in subreddits_input.split('\n') if s.strip()]
        custom_keywords = [k.strip() for k in keywords_input.split('\n') if k.strip()]
        
        if not custom_subreddits or not custom_keywords:
            st.warning("‚ùó Please provide both subreddits and keywords.")
        else:
            all_signals = []
            total = len(custom_subreddits)
            progress_bar = st.progress(0.0, text="Starting scan...")
            for i, sub_name in enumerate(custom_subreddits):
                progress_bar.progress(i / total, text=f"Scanning r/{sub_name} ({i}/{total})...")
                try:
                    signals = find_buying_signals(reddit, sub_name, custom_keywords, time_filter, post_limit, comment_limit)
                    if signals: all_signals.extend(signals)
                    progress_bar.progress((i + 1) / total, text=f"‚úÖ Completed r/{sub_name} ({i+1}/{total})")
                except PRAWException as e:
                    st.warning(f"Could not fully scan r/{sub_name}: {e}")
                    progress_bar.progress((i + 1) / total, text=f"‚ö†Ô∏è Skipped r/{sub_name} ({i+1}/{total})")
                except Exception as e:
                    st.error(f"An unexpected critical error occurred at r/{sub_name}: {e}")
                    progress_bar.progress((i + 1) / total, text=f"‚ùå Error at r/{sub_name} ({i+1}/{total})")

            progress_bar.progress(1.0, text="üéâ Scan complete!")
            if all_signals:
                st.session_state["signals_df"] = pd.DataFrame(all_signals)
            else:
                st.session_state["signals_df"] = None
                st.info("No buying signals found with the given criteria.")

    # De code voor het weergeven en downloaden van de resultaten (blijft ongewijzigd).
    if st.session_state.get("signals_df") is not None:
        df_signals = st.session_state["signals_df"]
        st.success(f"‚úÖ Found {len(df_signals)} buying signals.")
        st.dataframe(df_signals, use_container_width=True, hide_index=True)
        df_signals_download = df_signals.copy()
        df_signals_download['Text'] = df_signals_download['Text'].str.replace('\n', ' ', regex=False).str.strip()
        csv_signals = df_signals_download.to_csv(index=False).encode('utf-8')
        st.download_button(
            "üì• Download Signals as CSV",
            csv_signals, 'buying_signals.csv', 'text/csv', use_container_width=True
        )

# --- Hoofdlogica (Login State Machine) ---
def main():
    st.set_page_config(page_title="The Audience Finder PRO", layout="wide")
    auth_code = st.query_params.get("code")

    if "refresh_token" in st.session_state:
        try:
            reddit_instance = praw.Reddit(
                client_id=CLIENT_ID, client_secret=CLIENT_SECRET,
                user_agent=f"AudienceFinderPro/Boyd (user: {st.session_state.get('username', '...')})",
                refresh_token=st.session_state["refresh_token"]
            )
            if not reddit_instance.user.me(): raise PRAWException("Token expired or revoked.")
            show_main_app(reddit_instance)
        except PRAWException as e:
            st.error(f"Reddit connection failed: {e}. Please log in again.")
            st.session_state.clear()
            st.rerun()
        return
    if auth_code:
        try:
            temp_reddit = praw.Reddit(
                client_id=CLIENT_ID, client_secret=CLIENT_SECRET,
                redirect_uri=REDIRECT_URI, user_agent="AudienceFinderPro/Boyd (Token Exchange)"
            )
            refresh_token = temp_reddit.auth.authorize(auth_code)
            st.session_state["refresh_token"] = refresh_token
            user_reddit = praw.Reddit(client_id=CLIENT_ID, client_secret=CLIENT_SECRET, user_agent="AudienceFinderPro/Boyd (Get Username)", refresh_token=refresh_token)
            st.session_state["username"] = user_reddit.user.me().name
            st.session_state["password_correct"] = True
            st.query_params.clear()
            st.rerun()
        except PRAWException as e:
            st.error(f"Reddit authentication failed: {e}. Please try again.")
            st.session_state.clear()
            st.rerun()
        return
    if st.session_state.get("password_correct"):
        show_reddit_login_page()
        return
    show_password_form()

if __name__ == "__main__":
    main()